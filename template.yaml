#
# template.yaml
#
#    This file specifies the set of classifiers to train, and evaluate.
#    It is to be used as the input file for 'perform_experiments.py', or
#    'generate_trials.py'.
#    Any parameter may be given a set of alternate values by replacing its value
#    with a dictionary with the single key 'paramSet' whose value is an array of
#    alternate values.
#    A trial will be generated for every possible combination of alternate values.
#
#    Notes:
#      - Specify all paths from the code directory.
#      - Quote all numbers.

# maxImageCountDiff: [644, 2532, 2132] # pos, neg, bak
# maxImageCountDiff: [0, 1032, 1132] # pos, neg, bak

# Acceptable limits:
#  - number: 6000
#  - posFrac: 0.66
#  - hardNegFrac: 0.75

# # Dataset for testing hardNegFrac hypothesis:
# number: { paramSet: ['6000'] }
# hardNegFrac: { paramSet: ['0.00', '0.2', '0.4', '0.6', '0.8', '1.0'] }
# skipFrac: { paramSet: ['0.2'] }

# # Dataset for testing classifier improvement due to number of samples:
# number: { paramSet: ['1000', '2000', '3000', '4000', '5000', '6000'] }
# hardNegFrac: { paramSet: ['0.2'] }
# skipFrac: { paramSet: ['0.2'] }

# # Combined dataset for testing both hypotheses:
# number: { paramSet: ['1000', '2000', '3000', '4000', '5000', '6000'] }
# hardNegFrac: { paramSet: ['0.00', '0.2', '0.4', '0.6', '0.8', 1.0] }
# skipFrac: { paramSet: ['0.2'] }
# posFrac: { paramSet: ['0.66'] }
# featureType: { paramSet: [HAAR, LBP, HOG] }

dataset:
    description:
        # # Specify fractions:
        # number: { paramSet: ['32000'] } # Total number of samples.
        # posFrac: { paramSet: ['0.16'] } # Fraction of samples that will be positive.
        # hardNegFrac: { paramSet: ['0.0'] } # Fraction of *negative* samples that will be hard negatives.

        # OR

        # Specify numbers (use 'ALL' to select all images):
        numPositive: 'ALL'
        numNegative: 'ALL'
        numBackground: 20000

        synsets: # Sample from only these synsets (use '.*' for all).
            pos:
                - '.*'
                # - n02799071 # baseball
            neg:
                - '.*'
            bak:
                - '.*'

    directory: # Directories from which to draw the different image types.
        # bbinfo: /Users/mitchell/data/imagenet/bbinfo
        # positive: /Users/mitchell/data/imagenet/images

        # bbinfo: /Users/mitchell/data/kitti/bbinfo
        # positive: /Users/mitchell/data/kitti/training/image_2
        #
        # # bbinfo: /Users/mitchell/data/car-detection/bbinfo
        # # positive: /Users/mitchell/data/car-detection/shopping
        #
        background: /Users/mitchell/google-drive/honours/vision-paper/code/samples/background_raw
        # negative: /Users/mitchell/google-drive/honours/vision-paper/code/samples/hard_negative

        # bbinfo: /Users/mitchell/data/synthetic/bbinfo
        # positive: /Users/mitchell/data/synthetic/positive
        # background: /Users/mitchell/data/synthetic/background

        bbinfo: /Users/mitchell/data/car-detection/bbinfo
        # positive: /Users/mitchell/data/car-detection/university
        # # # positive: /Users/mitchell/data/car-detection/shopping
        # background: /Users/mitchell/data/car-detection/shopping

        positive: /Users/mitchell/data/car-detection/generated/positive
        # background: /Users/mitchell/data/car-detection/generated/negative
        negative: /Users/mitchell/data/car-detection/generated/negative

        # Base directory when generating a dataset using syntheticdataset.py
        synthetic: /Users/mitchell/data/synthetic

        # Input and output directories for cardetection.detection.save_samples:
        generation:
            input:
                # Sample positive regions specified in *__bbinfo.dat files in
                # the bbinfo directory.
                positive:
                    - /Users/mitchell/data/car-detection/maths
                    - /Users/mitchell/data/car-detection/shopping
                    - /Users/mitchell/data/car-detection/university

                # Sample random negative regions.
                background: /Users/mitchell/google-drive/honours/vision-paper/code/samples/background_raw

                # Sample only negative regions that don't overlap the provided
                # exclusion regions specified in *__exclusion.dat files in
                # the bbinfo directory. Ignore images for which exclusion
                # information is not provided.
                exclusion: /Users/mitchell/data/car-detection/shopping
                hard_negative_classifier: /Users/mitchell/google-drive/honours/car-detection/car-detection/data/opencv_hog_48hours/trial_ftHOG/data
            output:
                positive: /Users/mitchell/data/car-detection/generated/positive
                negative: /Users/mitchell/data/car-detection/generated/negative

    modifiers:
        # Modifier ranges to be applied to positive samples:
        # Note: Modifiers are applied in the following order:
        #  - translate
        #  - scale
        #  - rotate
        #  - xflip

        # TODO: Add contrast + brightness adjustment.

        # Whether to use interpolation when resizing samples:
        use_interp: False

        # Whether to allow flipping the sample horizontally:
        enable_xflip: True # True or False

        # Rotation range is [-max_rotation_degrees, max_rotation_degrees]:
        # Warning: Setting a non-zero rotation will slow down image generation
        # by an order of magnitude.
        # max_rotation_degrees: '8.0'
        # max_rotation_degrees: '5.0'
        max_rotation_degrees: '0.0'

        # Max translation in each dimension as a fraction of sample size:
        max_trans_frac: ['0.05', '0.05']
        # max_trans_frac: ['0.0', '0.0']

        # Range of allowable scale factors (about the centre of the sample):
        scale_range: ['0.95', '1.1']
        # scale_range: ['1.0', '1.0']

        # Use different random scaling factors for both the x and y axes,
        # allowing the aspect ratio to change:
        # scale_axes_independently: True # True or False
        scale_axes_independently: True # True or False
training:
    # Parameters for training a basic HOG + Linear SVM classifier:
    svm:
        # Window size for HOG + Linear SVM classifier:
        # window_dims: ['224', '128'] # aspect 1.75
        # window_dims: ['112', '64'] # aspect 1.75
        # window_dims: ['42', '24'] # aspect 1.75
        # window_dims: ['28', '16'] # aspect 1.75

        # window_dims: ['192', '128'] # aspect 1.5
        # window_dims: ['144', '96'] # aspect 1.5
        # window_dims: ['96', '64'] # aspect 1.5
        window_dims: ['48', '32'] # aspect 1.5

        # window_dims: ['176', '128'] # aspect 1.375
        # window_dims: ['128', '96'] # aspect 1.333333
        # window_dims: ['88', '64'] # aspect 1.375
        # window_dims: ['16', '16'] # aspect 1.375

        # window_dims: ['64', '128'] # aspect 0.5
        # window_dims: ['128', '64'] # aspect 2.0

        # window_dims: ['300', '200'] # aspect 1.5

        # Number of positive and negative images to train with.
        # pos_num: '19479' # KITTI dataset

        # pos_num: '100000'
        # neg_num: '100000'
        # neg_num: '10000'

        # pos_num: '100000'
        # neg_num: '200000'

        pos_num: '8000'
        neg_num: '60000'

        # Number of rounds of hard-negative mining to perform
        mining_rounds: '2'

        # Number of hard negative samples to add to the training set as a fraction of the current number of negatives.
        mining_increase_frac: '0.2'
    basic:
        data: classifiers
        numStages: '29' # <number_of_stages = 20>]
        # numPos: '5000' # Number of positive samples used to train each stage of the classifier.
        # numNeg: '60000' # Number of negative samples used to train each stage of the classifier.
        numPos: '6500' # Number of positive samples used to train each stage of the classifier.
        numNeg: '6000' # Number of negative samples used to train each stage of the classifier.
    cascade:
        featureType: { paramSet: [HOG] } # {HAAR(default), LBP, HOG}
        # featureType: { paramSet: [HAAR, LBP, HOG] } # {HAAR(default), LBP, HOG}

        # Window size for cascade classifier:
        sampleSize: ['112', '64'] # [24, 24]
    boost:
        minHitRate: '0.995' # 0.995
        maxFalseAlarmRate: '0.667' # 0.5
        weightTrimRate: '0.95' # 0.95
        maxDepth: '1' # 1
        maxWeakCount: '100' # 100

        # # TODO: Consider just using numPos instead of skipFrac.
        # # skipFrac: { paramSet: ['0.1'] } # http://answers.opencv.org/question/4368/
        # skipFrac: { paramSet: ['0.2'] } # http://answers.opencv.org/question/4368/
        #                 # While the selection, some new positive samples from
        #                 # vec-file can be recognized as background right away
        #                 # by the current cascade and we skip such samples. The
        #                 # count of skipped sample depends on your vec-file
        #                 # (how different samples are in it) and other training
        #                 # parameters. This is an estimate of the total number
        #                 # of skipped samples from vec-file (for all stages) as
        #                 # a fraction of the total number of positive samples.
    haarFeature:
        mode: ALL # Use extended Haar features
testing:
    directories:
        # - /Users/mitchell/data/imagenet/test
        - /Users/mitchell/data/car-detection/maths
        # - /Users/mitchell/data/car-detection/university
        # - /Users/mitchell/data/car-detection/shopping
        # - /Users/mitchell/data/kitti/training/image_2
        # - /Users/mitchell/data/synthetic/positive
        # - /Users/mitchell/data/synthetic/test
        # - /Users/mitchell/data/kitti/testing/image_2
        # - /Users/mitchell/google-drive/honours/vision-paper/code/samples/hard_negative_test_set/
        # - /Users/mitchell/google-drive/honours/vision-paper/code/samples/background_test_set/
